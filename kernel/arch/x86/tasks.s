.extern    current_thread       # Внешние ссылки на текущую задачу
.extern    kernel_tss           # и сегмент состояния задачи


.global    task_switch_asm          # Делаем функцию глобальной, доступной извне

task_switch_asm:
    push    %ebp                # Пролог функции совместимой с C по вызову
    pushf                       # Проталкиваем флаги в стек
    cli                         # Выключаем прерывания
        # Сохраняем указатель стека текущей задачи
    mov    current_thread, %edx # Грузим EDX адресом структуры текущей задачи
    mov    %esp, 28(%edx)       # Пишем текущий ESP в структуру задачи
        # Берем новую задачу из очереди
    mov    4(%edx), %ecx        # Грузим ECX адресом структуры следующей задачи
    mov    %ecx, current_thread # Модифицируем указатель на текущую задачу
        # Переключаем стек
    mov    current_thread, %edx # Грузим EDX указателем на новую задачу
    mov    28(%edx), %esp       # Загружаем в ESP указатель стека новой задачи
        # Модифицируем вершину стека ядра в TSS
    mov    40(%edx), %eax       # Читаем вершину стека из структуры потока    
    mov    $kernel_tss, %edx    # Грузим EDX адресом TSS
    mov    %eax, 4(%edx)        # Пишем вершину стека в поле tss.esp0
    popf                        # Возвращаем флаги из стека, неявно включая прерывания     
    pop    %ebp                 # Эпилог функции совместимой с C по вызову 
    ret         
